const { default: makeWASocket, useMultiFileAuthState, DisconnectReason } = require('@whiskeysockets/baileys');
const { Boom } = require('@hapi/boom');
const pino = require('pino');
const config = require('./config');

// Configuration
const ADMIN_NUMBER = config.ADMIN.jid;
const BOT_NUMBER = config.BOT_PRINCIPAL.jid;

// Fonction pour formater le num√©ro en JID
function formaterJID(numero) {
  if (numero.includes('@s.whatsapp.net')) return numero;
  return `${numero}@s.whatsapp.net`;
}

// Fonction pour envoyer un message format√©
async function envoyerMessage(sock, jid, message) {
  try {
    const formattedJid = formaterJID(jid);
    console.log(`üì§ Tentative d'envoi √† ${jid}: ${message.substring(0, 30)}...`);
    await sock.sendMessage(formattedJid, { text: message });
    console.log(`‚úÖ Message envoy√© avec succ√®s √† ${jid}`);
    return true;
  } catch (error) {
    console.error(`‚ùå ERREUR D'ENVOI √† ${jid}:`, error);
    return false;
  }
}

// Fonction pour confirmer une transaction
async function confirmerTransaction(sock, numero) {
  try {
    console.log(`üîÑ Tentative de confirmation pour le num√©ro: ${numero}`);
    
    // V√©rifier si le num√©ro est valide
    if (!numero || numero.length < 8) {
      console.error(`‚ùå Num√©ro invalide: ${numero}`);
      await envoyerMessage(sock, ADMIN_NUMBER, `‚ùå Num√©ro invalide: ${numero}`);
      return false;
    }
    
    // Envoyer la confirmation √† l'admin
    await envoyerMessage(sock, ADMIN_NUMBER, `‚úÖ Transaction confirm√©e pour le num√©ro ${numero}`);
    
    // Envoyer la confirmation au bot principal
    await envoyerMessage(sock, BOT_NUMBER, `CMD:CONFIRMER:${numero}`);
    
    console.log(`‚úÖ Confirmation envoy√©e pour le num√©ro ${numero}`);
    return true;
  } catch (error) {
    console.error(`‚ùå Erreur lors de la confirmation pour ${numero}:`, error);
    await envoyerMessage(sock, ADMIN_NUMBER, `‚ùå Erreur lors de la confirmation pour ${numero}: ${error.message}`);
    return false;
  }
}

// Fonction principale pour d√©marrer le bot
async function demarrerBot() {
  console.log('üöÄ D√©marrage du bot de confirmation...');
  
  try {
    // Charger l'√©tat d'authentification avec un nouveau dossier
    const { state, saveCreds } = await useMultiFileAuthState('auth_state_confirmation');
    console.log('‚úÖ √âtat d\'authentification charg√©');

    // Logger pour les messages WhatsApp avec moins de messages pour r√©duire la charge
    const logger = pino({ level: 'error' });

    // Cr√©er la connexion WhatsApp avec des param√®tres anti-conflit
    const sock = makeWASocket({
      auth: state,
      printQRInTerminal: true,
      logger,
      markOnlineOnConnect: false,  // Ne pas marquer comme en ligne automatiquement
      version: [2, 2323, 4],       // Utiliser une version sp√©cifique pour √©viter les conflits
      browser: ['CHAP-CHAP Confirmation', 'Chrome', '10.0'],  // Identifiant unique pour ce bot
      connectTimeoutMs: 60000,     // Augmenter le d√©lai avant timeout
      keepAliveIntervalMs: 30000,  // Keep-alive plus fr√©quent
      retryRequestDelayMs: 500     // D√©lai plus court pour les nouvelles tentatives
    });
    console.log('‚úÖ Socket WhatsApp cr√©√©');

    // G√©rer les √©v√©nements de la connexion
    sock.ev.on('connection.update', (update) => {
      const { connection, lastDisconnect } = update;
      console.log('üíª √âtat de la connexion:', update);

      if (connection === 'close') {
        const statusCode = lastDisconnect?.error?.output?.statusCode;
        const shouldReconnect = statusCode !== DisconnectReason.loggedOut;

        console.log('‚ùå Connexion ferm√©e, code:', statusCode, 'reconnexion:', shouldReconnect);

        if (shouldReconnect) {
          // Attendre 10 secondes avant de se reconnecter pour √©viter les cycles de reconnexion rapides
          console.log('üïî Attente de 10 secondes avant de r√©essayer...');
          setTimeout(() => demarrerBot(), 10000);
        }
      } else if (connection === 'open') {
        console.log('‚úÖ Bot de confirmation connect√© avec succ√®s!');
      }
    });

    // √âcouter les changements d'√©tat d'authentification
    sock.ev.on('creds.update', saveCreds);

    // √âcouter les messages
    sock.ev.on('messages.upsert', async ({ messages }) => {
      for (const message of messages) {
        // Ne traiter que les messages entrants
        if (!message.key.fromMe) {
          try {
            // R√©cup√©rer les d√©tails du message
            const remoteJid = message.key.remoteJid;
            const messageContent = message.message?.conversation || 
                                  message.message?.extendedTextMessage?.text || 
                                  '';
            
            // S'il n'y a pas de contenu ou si c'est un message de statut, ignorer
            if (!messageContent || remoteJid === 'status@broadcast') {
              continue;
            }
            
            // Ignorer les messages de groupe
            if (remoteJid.includes('@g.us')) {
              console.log(`‚ö†Ô∏è Message ignor√© - Message de groupe (${remoteJid})`);
              continue;
            }
            
            // Extraire le num√©ro d'exp√©diteur
            const sender = remoteJid.split('@')[0];
            const adminNumero = ADMIN_NUMBER.split('@')[0];
            
            // Afficher le message re√ßu
            console.log(`üì• Message re√ßu de ${sender}: ${messageContent}`);
            
            // V√©rifier si le message vient de l'administrateur
            if (sender === adminNumero) {
              // Format: CONFIRMER:0142828966
              if (messageContent.startsWith('CONFIRMER:')) {
                const numero = messageContent.split(':')[1].trim();
                await confirmerTransaction(sock, numero);
              }
              // Format: confirmer 0142828966
              else if (messageContent.toLowerCase().startsWith('confirmer ')) {
                const numero = messageContent.split(' ')[1].trim();
                await confirmerTransaction(sock, numero);
              }
              else {
                await envoyerMessage(sock, ADMIN_NUMBER, 
                  `üìã *Commandes disponibles:*\n\n` +
                  `- CONFIRMER:0142828966\n` +
                  `- confirmer 0142828966`
                );
              }
            } 
            // Si ce n'est pas l'admin, ignorer
            else {
              console.log(`‚ö†Ô∏è Message ignor√© - Utilisateur non autoris√© (${sender})`);
            }
          } catch (err) {
            console.error('‚ùå Erreur lors du traitement du message:', err);
          }
        }
      }
    });

    return sock;
  } catch (err) {
    console.error('‚ùå Erreur lors du d√©marrage du bot:', err);
    console.log('üïî Nouvelle tentative dans 20 secondes...');
    // Attendre 20 secondes avant de r√©essayer
    setTimeout(() => demarrerBot(), 20000);
    return null;
  }
}

// D√©marrer le bot
console.log('üì± Initialisation du bot de confirmation...');
demarrerBot();
